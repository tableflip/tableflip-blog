{"meta":{"exported_on":1411413013426,"version":"002"},"data":{"posts":[{"id":2,"uuid":"6da01723-063a-4a26-81ce-312384b0e21b","title":"Node streams are hard","slug":"node-streams-are-hard","markdown":"Node streams are hard. So I decided to learn them. Then I found out they weren't hard, I just didn't know about them yet. I updated `markdown-pdf` to have a streaming interface. It's a farse really, because marked doesn't have a streaming interface so `markdown-pdf` has to buffer all the markdown into memory before it is converted to HTML. That's pretty dull, but I'm working on the assumption that in the future there'll be a streaming markdown to HTML parser I can pipe the markdown into.\n\nLikewise with converting the HTML to a PDF. Currenty `markdown-pdf` uses [phantomjs](http://phantomjs.org/) to render the PDF. The HTML is piped into a temporary file, but then phantomjs reads the entire file and renders the page. Phantomjs _isn't_ node and doesn't have a stream API so when it's done it saves the PDF file to disk and node then creates a read stream for piping it to wherever.\n\nIt's complex because there are two streams involved - an input stream and an output stream, the two are related, but disconnected by the need for a child phantomjs process to be spawned and do some processing in the middle of the pipe. Luckily there's a module for composing these two streams into one readable/writeable stream (or duplex stream if you will), which pipes _in_ to the first stream and _out_ from the second. It's called [duplexer](https://npmjs.org/package/duplexer) and is awesome.\n\nAnyway, the point is that streams aren't hard, and actually there are a whole bunch of modules out there to help you work with them [more easily](https://npmjs.org/package/through). They seemed hard because I hadn't taken the time to use them and get to know them. If you still feel like they are hard, then stop that and build something that uses them. I guess what pushed me into taking the plunge was hearing that \"if you have a module that's doing any kind of IO in node and you're not using streams, then you're doing it wrong\".","html":"<p>Node streams are hard. So I decided to learn them. Then I found out they weren't hard, I just didn't know about them yet. I updated <code>markdown-pdf</code> to have a streaming interface. It's a farse really, because marked doesn't have a streaming interface so <code>markdown-pdf</code> has to buffer all the markdown into memory before it is converted to HTML. That's pretty dull, but I'm working on the assumption that in the future there'll be a streaming markdown to HTML parser I can pipe the markdown into.</p>\n\n<p>Likewise with converting the HTML to a PDF. Currenty <code>markdown-pdf</code> uses <a href=\"http://phantomjs.org/\">phantomjs</a> to render the PDF. The HTML is piped into a temporary file, but then phantomjs reads the entire file and renders the page. Phantomjs <em>isn't</em> node and doesn't have a stream API so when it's done it saves the PDF file to disk and node then creates a read stream for piping it to wherever.</p>\n\n<p>It's complex because there are two streams involved - an input stream and an output stream, the two are related, but disconnected by the need for a child phantomjs process to be spawned and do some processing in the middle of the pipe. Luckily there's a module for composing these two streams into one readable/writeable stream (or duplex stream if you will), which pipes <em>in</em> to the first stream and <em>out</em> from the second. It's called <a href=\"https://npmjs.org/package/duplexer\">duplexer</a> and is awesome.</p>\n\n<p>Anyway, the point is that streams aren't hard, and actually there are a whole bunch of modules out there to help you work with them <a href=\"https://npmjs.org/package/through\">more easily</a>. They seemed hard because I hadn't taken the time to use them and get to know them. If you still feel like they are hard, then stop that and build something that uses them. I guess what pushed me into taking the plunge was hearing that \"if you have a module that's doing any kind of IO in node and you're not using streams, then you're doing it wrong\".</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1390402475245,"created_by":1,"updated_at":1390402475245,"updated_by":1,"published_at":1390402475247,"published_by":1},{"id":3,"uuid":"b366b62c-9243-4f25-aaf8-c5123353e3cf","title":"Test the ideas","slug":"about","markdown":"***Ideas are king, but not all of them are royalty material.***\n\nStill, it's important to find out. You really don't know what kind of idea you've got until it's been tested. Tableflip encourages a creative working relationship where all the things are tried out to see what works best.\n\n> The only way of discovering the limits of the possible is to venture a little way past them into the impossible.\n> \n> Arthur C. Clarke, \"Profiles of The Future\", 1961 \n\nStuff that doesn't work gets pruned and you're left with an awesome simple thing that does something new and interesting.\n\nWhat if you could ship a thing after a week? How about every week? Well, this is what tableflip does...and then you can change direction of the project, reprioritise, or continue with the plan.\n\nWho are you?\n---\n\nGood question.\n\n<ul id=\"mugshots\">\n    <li><a href=\"https://github.com/alanshaw\"><img src=\"https://en.gravatar.com/avatar/8ca838dbb449a1359b5a4eadd26abb42\"></a></li>\n    <li><a href=\"https://github.com/olizilla\"><img src=\"https://en.gravatar.com/avatar/1114a99d8da01f890f39c02bd2b1bfc3\"></a></li>\n</ul>\n\nAlan and Oli. Two freelancers, not unlike Sharky & George, who worked on various web development projects together for some 6 years before joining forces to take over the world. Between them they have some 20 or so years of experience in development and hacking on the web.\n\nShip the simple\n---\n\nTableflip builds great simple things that do their job really well.\n\nTableflip was born from outrage of complicated things that do their job badly.\n\nIf a chunk of work is going to take longer than a week to build, then it's probably way too complicated. Complicated things are more likely to break, harder to maintain, not as fast to run and more than likely slower to download.\n\nThat's why tableflip aims to give you something every week. Simple things are better, and simple things can be built in a week.\n\nHire us\n---\n\nTableflip can build you an awesome thing. [Get in contact](/contact) with us now.","html":"<p><strong><em>Ideas are king, but not all of them are royalty material.</em></strong></p>\n\n<p>Still, it's important to find out. You really don't know what kind of idea you've got until it's been tested. Tableflip encourages a creative working relationship where all the things are tried out to see what works best.</p>\n\n<blockquote>\n  <p>The only way of discovering the limits of the possible is to venture a little way past them into the impossible.</p>\n  \n  <p>Arthur C. Clarke, \"Profiles of The Future\", 1961 </p>\n</blockquote>\n\n<p>Stuff that doesn't work gets pruned and you're left with an awesome simple thing that does something new and interesting.</p>\n\n<p>What if you could ship a thing after a week? How about every week? Well, this is what tableflip does...and then you can change direction of the project, reprioritise, or continue with the plan.</p>\n\n<h2 id=\"whoareyou\">Who are you?  </h2>\n\n<p>Good question.</p>\n\n<ul id=\"mugshots\">  \n    <li><a href=\"https://github.com/alanshaw\"><img src=\"https://en.gravatar.com/avatar/8ca838dbb449a1359b5a4eadd26abb42\"></a></li>\n    <li><a href=\"https://github.com/olizilla\"><img src=\"https://en.gravatar.com/avatar/1114a99d8da01f890f39c02bd2b1bfc3\"></a></li>\n</ul>\n\n<p>Alan and Oli. Two freelancers, not unlike Sharky &amp; George, who worked on various web development projects together for some 6 years before joining forces to take over the world. Between them they have some 20 or so years of experience in development and hacking on the web.</p>\n\n<h2 id=\"shipthesimple\">Ship the simple  </h2>\n\n<p>Tableflip builds great simple things that do their job really well.</p>\n\n<p>Tableflip was born from outrage of complicated things that do their job badly.</p>\n\n<p>If a chunk of work is going to take longer than a week to build, then it's probably way too complicated. Complicated things are more likely to break, harder to maintain, not as fast to run and more than likely slower to download.</p>\n\n<p>That's why tableflip aims to give you something every week. Simple things are better, and simple things can be built in a week.</p>\n\n<h2 id=\"hireus\">Hire us  </h2>\n\n<p>Tableflip can build you an awesome thing. <a href=\"/contact\">Get in contact</a> with us now.</p>","image":null,"featured":0,"page":1,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1390402517410,"created_by":1,"updated_at":1390402517410,"updated_by":1,"published_at":1390402517412,"published_by":1},{"id":4,"uuid":"8bc8603f-db85-4aee-b93c-6778023188a7","title":"Contact","slug":"contact","markdown":"Get in contact with us for any reason. Fire an email to hello@tableflip.io and we'll mail you back as soon as we can.","html":"<p>Get in contact with us for any reason. Fire an email to <a href='mailto:hello@tableflip.io'>hello@tableflip.io</a> and we'll mail you back as soon as we can.</p>","image":null,"featured":0,"page":1,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1390402556802,"created_by":1,"updated_at":1390402613525,"updated_by":1,"published_at":1390402556803,"published_by":1},{"id":5,"uuid":"eb87735d-a118-4fdd-85ad-f683d8e3faa0","title":"The first Meteor London DevShop","slug":"the-first-meteor-london-devshop","markdown":"We've been organising the Meteor London meetup for over a year now and it has become the [biggest Meteor meetup in Europe](http://meteor.meetup.com/). Recently Meteor got in touch with us to express their approval and intention to officially support the group by making it an [official Meteor DevShop](https://www.meteor.com/blog/2014/02/04/devshop-goes-global-meteor-londons-first-official-devshop).\n\n![](/content/images/2014/Feb/meteor_london_2014_02_loop_sml.jpg)\n\nWe're really excited to be part of the official Meteor meetup family and really proud that Meteor have recognised our work. Last night the meetup was the best yet. [Jade Wang](https://twitter.com/qiqing) from the Meteor development team was visiting from San Francisco and we had some great interactive talks ranging from creating your own Meteor <a href=\"https://github.com/meteor/meteor/blob/devel/packages/livedata/DDP.md\"><abbr title=\"Distributed Data Protocol\">DDP</abbr></a> client to creating a distributed boy band with each member controlling an instrument from their phone.\n\nIt'd be remiss of me not to mention [Baris Balic](https://twitter.com/BarisBalic) from [uSwitch](http://www.uswitch.com/) who was the venue host. Baris did everything in his power to make the night run as smoothly as possible and even gave an incredible lightning talk and demo, so a big thanks to you!\n\n![](/content/images/2014/Feb/meteor_london_2014_02_gumbyman_sml.jpg)\n\nAlso, thanks to all the speakers - [Howard](http://howardtang.co.uk/) and [Manuel](https://twitter.com/manueltimita) for their main talks, and to the seven lightning talkers. Not forgetting to mention everyone who turned up dispite the tube strike - thank you as well!\n\nOn the [Meteor London meetup page](http://www.meetup.com/Meteor-London/) you can see pictures and comments from the event and also details of when the next one will be held. Check us out, there'll be another Meteor DevShop next month, we hope to see you there.\n\n![](/content/images/2014/Feb/meteor_london_2014_02_fin_sml.jpg)\n","html":"<p>We've been organising the Meteor London meetup for over a year now and it has become the <a href=\"http://meteor.meetup.com/\">biggest Meteor meetup in Europe</a>. Recently Meteor got in touch with us to express their approval and intention to officially support the group by making it an <a href=\"https://www.meteor.com/blog/2014/02/04/devshop-goes-global-meteor-londons-first-official-devshop\">official Meteor DevShop</a>.</p>\n\n<p><img src=\"/content/images/2014/Feb/meteor_london_2014_02_loop_sml.jpg\" alt=\"\" /></p>\n\n<p>We're really excited to be part of the official Meteor meetup family and really proud that Meteor have recognised our work. Last night the meetup was the best yet. <a href=\"https://twitter.com/qiqing\">Jade Wang</a> from the Meteor development team was visiting from San Francisco and we had some great interactive talks ranging from creating your own Meteor <a href=\"https://github.com/meteor/meteor/blob/devel/packages/livedata/DDP.md\"><abbr title=\"Distributed Data Protocol\">DDP</abbr></a> client to creating a distributed boy band with each member controlling an instrument from their phone.</p>\n\n<p>It'd be remiss of me not to mention <a href=\"https://twitter.com/BarisBalic\">Baris Balic</a> from <a href=\"http://www.uswitch.com/\">uSwitch</a> who was the venue host. Baris did everything in his power to make the night run as smoothly as possible and even gave an incredible lightning talk and demo, so a big thanks to you!</p>\n\n<p><img src=\"/content/images/2014/Feb/meteor_london_2014_02_gumbyman_sml.jpg\" alt=\"\" /></p>\n\n<p>Also, thanks to all the speakers - <a href=\"http://howardtang.co.uk/\">Howard</a> and <a href=\"https://twitter.com/manueltimita\">Manuel</a> for their main talks, and to the seven lightning talkers. Not forgetting to mention everyone who turned up dispite the tube strike - thank you as well!</p>\n\n<p>On the <a href=\"http://www.meetup.com/Meteor-London/\">Meteor London meetup page</a> you can see pictures and comments from the event and also details of when the next one will be held. Check us out, there'll be another Meteor DevShop next month, we hope to see you there.</p>\n\n<p><img src=\"/content/images/2014/Feb/meteor_london_2014_02_fin_sml.jpg\" alt=\"\" /></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1391768146818,"created_by":1,"updated_at":1392650241526,"updated_by":1,"published_at":1391768146829,"published_by":1},{"id":6,"uuid":"3e952d40-f6e5-41f9-88c1-73a768aba12c","title":"Integrating passportjs with keystonejs","slug":"integrating-passportjs-with-keystonejs","markdown":"This is a simple guide on how to integrate passportjs with keystonejs as an AJAX endpoint using persistent sessions. We found Jed's helpful [post on google groups](https://groups.google.com/forum/#!topic/keystonejs/zfcCWS_WhdU) and decided to write down the steps for this particular use case.\n\nConfigure your passport with `serializeUser`, `deserializeUser` and the strategies you want to use. It'll look something like:\n\n```js\nvar keystone = require(\"keystone\")\nvar User = keystone.list(\"User\")\nvar LocalStrategy = require(\"passport-local\").Strategy\n\npassport.serializeUser(function (user, cb) {\n  cb(null, user._id)\n})\n\npassport.deserializeUser(function (id, cb) {\n  User.model.findById(id, function (er, user) {\n    cb(er, user)\n  })\n})\n\npassport.use(new LocalStrategy(/*...*/))\n/*...*/\n```\n\nAdd passport middleware to keystone pre routes:\n\n```js\nkeystone.pre(\"routes\", passport.initialize())\nkeystone.pre(\"routes\", passport.session())\n```\n\nCreate routes for logging in your user with particular strategies:\n\n```js\nkeystone.set(\"routes\", function (app) {\n  app.post(\n    \"/login\",\n    passport.authenticate(\"local\"),\n    // Only invoked on success\n    // passport automatically sends 401 on failure\n    function (req, res) {\n      return res.send({success: true});\n    })\n})\n```\n\nThat's it! Now the logged in user will be available in your other routes as `req.user`.","html":"<p>This is a simple guide on how to integrate passportjs with keystonejs as an AJAX endpoint using persistent sessions. We found Jed's helpful <a href=\"https://groups.google.com/forum/#!topic/keystonejs/zfcCWS_WhdU\">post on google groups</a> and decided to write down the steps for this particular use case.</p>\n\n<p>Configure your passport with <code>serializeUser</code>, <code>deserializeUser</code> and the strategies you want to use. It'll look something like:</p>\n\n<pre><code class=\"js\">var keystone = require(\"keystone\")  \nvar User = keystone.list(\"User\")  \nvar LocalStrategy = require(\"passport-local\").Strategy\n\npassport.serializeUser(function (user, cb) {  \n  cb(null, user._id)\n})\n\npassport.deserializeUser(function (id, cb) {  \n  User.model.findById(id, function (er, user) {\n    cb(er, user)\n  })\n})\n\npassport.use(new LocalStrategy(/*...*/))  \n/*...*/\n</code></pre>\n\n<p>Add passport middleware to keystone pre routes:</p>\n\n<pre><code class=\"js\">keystone.pre(\"routes\", passport.initialize())  \nkeystone.pre(\"routes\", passport.session())  \n</code></pre>\n\n<p>Create routes for logging in your user with particular strategies:</p>\n\n<pre><code class=\"js\">keystone.set(\"routes\", function (app) {  \n  app.post(\n    \"/login\",\n    passport.authenticate(\"local\"),\n    // Only invoked on success\n    // passport automatically sends 401 on failure\n    function (req, res) {\n      return res.send({success: true});\n    })\n})\n</code></pre>\n\n<p>That's it! Now the logged in user will be available in your other routes as <code>req.user</code>.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1394697669183,"created_by":1,"updated_at":1394698187131,"updated_by":1,"published_at":1394697676735,"published_by":1},{"id":7,"uuid":"08d90fae-0701-43c6-9a00-5be326fa5622","title":"Nodebots of London at Arduino Day 2014","slug":"nodebots-of-london-at-ardunio-day-2014","markdown":"Tableflip, along with [Nodebots of London](http://www.meetup.com/NodeBots-of-London/) co-organiser [Alex Potsides](https://twitter.com/achingbrain) stormed the London College of Communication in celebration of international Arduino Day 2014 ([#ArduinoD14](https://twitter.com/search?q=ArduinoD14)).\n\nWe ran a beginners workshop designed to teach people the fundementals of using [NodeJS](http://nodejs.org/) and the [johnny-five](https://github.com/rwaldron/johnny-five) library to talk to Arduinos.\n\n![](http://farm6.staticflickr.com/5162/13508114433_65c948d1c5.jpg)\n\nMany of the attendees were entirely new to coding, let alone coding using JavaScript, which proved both challenging and rewarding.\n\n> You saved us a lot of time by helping us getting started - and your demo was inspiring. Thank you.<br/>\n> _Huma Islam_\n\nIn truth, a lot of the work had been done for us already. We made heavy use of the excellent [Arduino Experimenter's Guide for NodeJS website](http://node-ardx.org/) which walks you through using various components such as LEDs, motors and servos, giving you circuit diagrams and code samples to draw from. We can't thank [Anna Gerber](https://github.com/AnnaGerber) enough for the fantastic work she's put into it.\n\nOur attendees were polite, open minded and excitable which really helps when picking up something completely new. Thanks to all who came.\n\nAside from our workshop, the day involved a whole host of other projects, demos, hacks, talks and workshops from [London Arduino](http://www.meetup.com/LondonArduino/), [Not Just Arduino](http://notjustarduino.org) and [South London Makerspace](http://southlondonmakerspace.org/). Check out [the hackpad](https://hackpad.com/Arduino-Day-LCC-0ykEyUcLj3o) with all the info about the day, including links to pictures, code etc. Thanks especially to [Marc Barto](https://twitter.com/marc_in_london) for organising and [Tom Lynch](https://twitter.com/unknowndomain) for sorting the venue.\n\n![](/content/images/2014/Mar/Bj6xGNtCEAA__Tr.jpg)","html":"<p>Tableflip, along with <a href=\"http://www.meetup.com/NodeBots-of-London/\">Nodebots of London</a> co-organiser <a href=\"https://twitter.com/achingbrain\">Alex Potsides</a> stormed the London College of Communication in celebration of international Arduino Day 2014 (<a href=\"https://twitter.com/search?q=ArduinoD14\">#ArduinoD14</a>).</p>\n\n<p>We ran a beginners workshop designed to teach people the fundementals of using <a href=\"http://nodejs.org/\">NodeJS</a> and the <a href=\"https://github.com/rwaldron/johnny-five\">johnny-five</a> library to talk to Arduinos.</p>\n\n<p><img src=\"http://farm6.staticflickr.com/5162/13508114433_65c948d1c5.jpg\" alt=\"\" /></p>\n\n<p>Many of the attendees were entirely new to coding, let alone coding using JavaScript, which proved both challenging and rewarding.</p>\n\n<blockquote>\n  <p>You saved us a lot of time by helping us getting started - and your demo was inspiring. Thank you.<br/>\n  <em>Huma Islam</em></p>\n</blockquote>\n\n<p>In truth, a lot of the work had been done for us already. We made heavy use of the excellent <a href=\"http://node-ardx.org/\">Arduino Experimenter's Guide for NodeJS website</a> which walks you through using various components such as LEDs, motors and servos, giving you circuit diagrams and code samples to draw from. We can't thank <a href=\"https://github.com/AnnaGerber\">Anna Gerber</a> enough for the fantastic work she's put into it.</p>\n\n<p>Our attendees were polite, open minded and excitable which really helps when picking up something completely new. Thanks to all who came.</p>\n\n<p>Aside from our workshop, the day involved a whole host of other projects, demos, hacks, talks and workshops from <a href=\"http://www.meetup.com/LondonArduino/\">London Arduino</a>, <a href=\"http://notjustarduino.org\">Not Just Arduino</a> and <a href=\"http://southlondonmakerspace.org/\">South London Makerspace</a>. Check out <a href=\"https://hackpad.com/Arduino-Day-LCC-0ykEyUcLj3o\">the hackpad</a> with all the info about the day, including links to pictures, code etc. Thanks especially to <a href=\"https://twitter.com/marc_in_london\">Marc Barto</a> for organising and <a href=\"https://twitter.com/unknowndomain\">Tom Lynch</a> for sorting the venue.</p>\n\n<p><img src=\"/content/images/2014/Mar/Bj6xGNtCEAA__Tr.jpg\" alt=\"\" /></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1396267591253,"created_by":1,"updated_at":1396294808113,"updated_by":1,"published_at":1396270472508,"published_by":1},{"id":8,"uuid":"3d251c8a-f2a7-44ed-8e7c-61c84bf40f61","title":"Building a dnode rpc server in ~50 lines of code","slug":"building-a-dnode-rpc-server-in-50-lines-of-code","markdown":"dnode is asynchronous rpc over websockets, using just javascript and callbacks.\n\nThis demo shows you how to create a dnode rpc server and use it in the browser in ~50 lines of code.\n\nYou're gonna need some things:\n\n```sh\nnpm install dnode\n```\n\nFor creating a websocket server, with fallback for older browsers:\n\n```sh\nnpm install shoe\n```\n\nFor serving static resources to the client:\n\n```sh\nnpm install ecstatic\n```\n\nFor allowing you to use node modules in the browser:\n\n```sh\nnpm install -g browserify\n```\n\nindex.html\n---\nCreate a HTML file where all the action will happen. Add the following lines of HTML:\n\n```html\n<!doctype html>\n<script src=\"bundle.js\"></script>\n```\n\nYep, thats it. `bundle.js` will contain your browserified client code (wait, it's coming later).\n\nserver.js\n---\nCreate a js file that'll contain your rpc api code.\n\nRequire a few modules:\n\n```js\nvar http = require(\"http\")\nvar dnode = require(\"dnode\")\nvar shoe = require(\"shoe\")\nvar ecstatic = require(\"ecstatic\")(__dirname)\n```\n\n`http` is a built in node module, which we'll use to serve `index.html` and `bundle.js` over plain old HTTP. `ecstatic` is a module that allows us to do this with minimal code. You essentially give `ecstatic` a directory and it then allows you to access all files in it.\n\n`dnode` and `shoe` is where the magic happens, but we'll get to that in a minute.\n\nNext lets grab some data that our server can serve. Create a JSON file with some data in it. In this example we're going to create a map of ship ID's to positions:\n\n```js\n{\n  \"ABC00090\": [{\n    \"latitude\": -7.098888888888889,\n    \"longitude\": 112.675\n  }, {\n    \"latitude\": 1.0325,\n    \"longitude\": 103.91527777777777\n  }],\n  \"XYZ00001\": [{\n    \"latitude\": 1.053611111111111,\n    \"longitude\": 104.94055555555556\n  }]\n}\n```\n\n...and then use it in `client.js`:\n\n```js\nvar data = require(\"./data.json\")\n```\n\nNow design the rpc api. Since we're using node and are meant to be all async, our api will call a callback function when the data has been retrieved. Usually this'll be sometick in the future, but because we have the data readily available, this'll be called immediately.\n\n```js\nvar api = {\n  ships: function (cb) {\n    cb(null, Object.keys(data))\n  },\n  positions: function (ship, cb) {\n    if (!data[ship]) return cb(new Error(\"Ship not found\"))\n    cb(null, data[ship])\n  }\n}\n```\n\nThe convention in node for callbacks is that an error object is passed as the first parameter. So if no error occurred, we pass null for the first parameter and the result as the second.\n\nNow create the HTTP server that'll serve our static assets and listen on `8080` or whatever the `PORT` environment variable tells us to listen on:\n\n```js\nvar serv = http.createServer(ecstatic)\nserv.listen(process.env.PORT || 8080)\n```\n\nFinally lets create the socket server and install it at `/api`:\n\n```js\nvar sock = shoe(function (stream) {\n  var d = dnode(api)\n  stream.pipe(d).pipe(stream)\n})\n\nsock.install(serv, \"/api\")\n```\n\n`shoe` creates a socket server that calls the passed function when a connection comes in. It's passed in a stream that represents the stream of data from/to the websocket. We're creating a new dnode object that transforms incoming data by calling our api and sending the output back down the stream.\n\n`stream.pipe(d).pipe(stream)` reads any incoming data and writes it to dnode, it is then transformed and read from dnode and written back into the stream to be sent to the browser.\n\nclient.js\n---\nCreate a js file that'll be used on the browser to interact with the server. You'll need `dnode` and `shoe` again:\n\n```js\nvar dnode = require(\"dnode\")\nvar shoe = require(\"shoe\")\n```\n\nSince we're going to be using browserify, we don't need to worry about polluting the global namespace so go ahead and define these in the top level of the file - you don't need an anonymous function wrapper. If you want to expose things outside of this file, you just need to export it, node style: `module.exports = \"[your exported object]\"` or assign it directly to the `window` object.\n\nConnect to the server websocket by passing shoe a string - the URL to connect to:\n\n```js\nvar sock = shoe(\"/api\")\n```\n\nUse dnode to call server methods when it is connected and ready to roll:\n\n```js\nvar d = dnode()\n\nd.on(\"remote\", function (remote) {\n  console.log(\"Got remote\", remote)\n\n  remote.ships(function (er, ships) {\n    if (er) return console.error(\"Failed to get ships\", er)\n    console.log(\"Got ships\", ships)\n\n    ships.forEach(function (ship) {\n      remote.positions(ship, function (er, positions) {\n        if (er) return console.error(\"Failed to get positions for ship\", ship, er)\n        console.log(\"Got positions for\", ship, positions)\n      })\n    })\n  })\n})\n```\n\nAll that's left to do on the client side is hook up the shoe/dnode pipeline as we did on the server:\n\n```js\nsock.pipe(d).pipe(sock)\n```\n\nBrowserify and run!\n---\nFinally, we just need to create our browserify bundle:\n\n```sh\nbrowserify client.js -o bundle.js\n```\n\nYou should now be able to start the socket server:\n\n```sh\nnode server.js\n```\n\n...and visit `http://localhost:8080/` in your browser. If it worked, your console should contain some output that looks like:\n\n```\n16:13:18.776 \"Got remote\" [object Object]\n16:13:18.788 \"Got ships\" [object Array]\n16:13:18.803 \"Got positions for\" \"ABC00090\" [object Array]\n16:13:18.803 \"Got positions for\" \"XYZ00001\" [object Array]\n```\n\nWhy is this useful?\n---\nUsing websockets allows us to reduce the latency of setting up and tearing down http connections by keeping a persistent connection open. It also allows us to circumvent the 6-8 concurrent request limit imposed by default on many browsers.\n\nUsing a websockets library like shoe gives us transparent fallback for older browsers without investing any time or resources.\n\nStreaming is a memory efficient way of communicating and transforming data. It allows your application to be more scaleable by decreasing it's memory footprint.\n\nUsing browserify allows us to use thousands of modules available on npm, encourages _our_ code to be modular, guards us from polluting the global namespace, reduces the number of requests to the server for individual javascript files and removes the need for us to work out and maintain the order in which js files should be loaded.","html":"<p>dnode is asynchronous rpc over websockets, using just javascript and callbacks.</p>\n\n<p>This demo shows you how to create a dnode rpc server and use it in the browser in ~50 lines of code.</p>\n\n<p>You're gonna need some things:</p>\n\n<pre><code class=\"sh\">npm install dnode  \n</code></pre>\n\n<p>For creating a websocket server, with fallback for older browsers:</p>\n\n<pre><code class=\"sh\">npm install shoe  \n</code></pre>\n\n<p>For serving static resources to the client:</p>\n\n<pre><code class=\"sh\">npm install ecstatic  \n</code></pre>\n\n<p>For allowing you to use node modules in the browser:</p>\n\n<pre><code class=\"sh\">npm install -g browserify  \n</code></pre>\n\n<h2 id=\"indexhtml\">index.html  </h2>\n\n<p>Create a HTML file where all the action will happen. Add the following lines of HTML:</p>\n\n<pre><code class=\"html\">&lt;!doctype html&gt;  \n&lt;script src=\"bundle.js\"&gt;&lt;/script&gt;  \n</code></pre>\n\n<p>Yep, thats it. <code>bundle.js</code> will contain your browserified client code (wait, it's coming later).</p>\n\n<h2 id=\"serverjs\">server.js  </h2>\n\n<p>Create a js file that'll contain your rpc api code.</p>\n\n<p>Require a few modules:</p>\n\n<pre><code class=\"js\">var http = require(\"http\")  \nvar dnode = require(\"dnode\")  \nvar shoe = require(\"shoe\")  \nvar ecstatic = require(\"ecstatic\")(__dirname)  \n</code></pre>\n\n<p><code>http</code> is a built in node module, which we'll use to serve <code>index.html</code> and <code>bundle.js</code> over plain old HTTP. <code>ecstatic</code> is a module that allows us to do this with minimal code. You essentially give <code>ecstatic</code> a directory and it then allows you to access all files in it.</p>\n\n<p><code>dnode</code> and <code>shoe</code> is where the magic happens, but we'll get to that in a minute.</p>\n\n<p>Next lets grab some data that our server can serve. Create a JSON file with some data in it. In this example we're going to create a map of ship ID's to positions:</p>\n\n<pre><code class=\"js\">{\n  \"ABC00090\": [{\n    \"latitude\": -7.098888888888889,\n    \"longitude\": 112.675\n  }, {\n    \"latitude\": 1.0325,\n    \"longitude\": 103.91527777777777\n  }],\n  \"XYZ00001\": [{\n    \"latitude\": 1.053611111111111,\n    \"longitude\": 104.94055555555556\n  }]\n}\n</code></pre>\n\n<p>...and then use it in <code>client.js</code>:</p>\n\n<pre><code class=\"js\">var data = require(\"./data.json\")  \n</code></pre>\n\n<p>Now design the rpc api. Since we're using node and are meant to be all async, our api will call a callback function when the data has been retrieved. Usually this'll be sometick in the future, but because we have the data readily available, this'll be called immediately.</p>\n\n<pre><code class=\"js\">var api = {  \n  ships: function (cb) {\n    cb(null, Object.keys(data))\n  },\n  positions: function (ship, cb) {\n    if (!data[ship]) return cb(new Error(\"Ship not found\"))\n    cb(null, data[ship])\n  }\n}\n</code></pre>\n\n<p>The convention in node for callbacks is that an error object is passed as the first parameter. So if no error occurred, we pass null for the first parameter and the result as the second.</p>\n\n<p>Now create the HTTP server that'll serve our static assets and listen on <code>8080</code> or whatever the <code>PORT</code> environment variable tells us to listen on:</p>\n\n<pre><code class=\"js\">var serv = http.createServer(ecstatic)  \nserv.listen(process.env.PORT || 8080)  \n</code></pre>\n\n<p>Finally lets create the socket server and install it at <code>/api</code>:</p>\n\n<pre><code class=\"js\">var sock = shoe(function (stream) {  \n  var d = dnode(api)\n  stream.pipe(d).pipe(stream)\n})\n\nsock.install(serv, \"/api\")  \n</code></pre>\n\n<p><code>shoe</code> creates a socket server that calls the passed function when a connection comes in. It's passed in a stream that represents the stream of data from/to the websocket. We're creating a new dnode object that transforms incoming data by calling our api and sending the output back down the stream.</p>\n\n<p><code>stream.pipe(d).pipe(stream)</code> reads any incoming data and writes it to dnode, it is then transformed and read from dnode and written back into the stream to be sent to the browser.</p>\n\n<h2 id=\"clientjs\">client.js  </h2>\n\n<p>Create a js file that'll be used on the browser to interact with the server. You'll need <code>dnode</code> and <code>shoe</code> again:</p>\n\n<pre><code class=\"js\">var dnode = require(\"dnode\")  \nvar shoe = require(\"shoe\")  \n</code></pre>\n\n<p>Since we're going to be using browserify, we don't need to worry about polluting the global namespace so go ahead and define these in the top level of the file - you don't need an anonymous function wrapper. If you want to expose things outside of this file, you just need to export it, node style: <code>module.exports = \"[your exported object]\"</code> or assign it directly to the <code>window</code> object.</p>\n\n<p>Connect to the server websocket by passing shoe a string - the URL to connect to:</p>\n\n<pre><code class=\"js\">var sock = shoe(\"/api\")  \n</code></pre>\n\n<p>Use dnode to call server methods when it is connected and ready to roll:</p>\n\n<pre><code class=\"js\">var d = dnode()\n\nd.on(\"remote\", function (remote) {  \n  console.log(\"Got remote\", remote)\n\n  remote.ships(function (er, ships) {\n    if (er) return console.error(\"Failed to get ships\", er)\n    console.log(\"Got ships\", ships)\n\n    ships.forEach(function (ship) {\n      remote.positions(ship, function (er, positions) {\n        if (er) return console.error(\"Failed to get positions for ship\", ship, er)\n        console.log(\"Got positions for\", ship, positions)\n      })\n    })\n  })\n})\n</code></pre>\n\n<p>All that's left to do on the client side is hook up the shoe/dnode pipeline as we did on the server:</p>\n\n<pre><code class=\"js\">sock.pipe(d).pipe(sock)  \n</code></pre>\n\n<h2 id=\"browserifyandrun\">Browserify and run!  </h2>\n\n<p>Finally, we just need to create our browserify bundle:</p>\n\n<pre><code class=\"sh\">browserify client.js -o bundle.js  \n</code></pre>\n\n<p>You should now be able to start the socket server:</p>\n\n<pre><code class=\"sh\">node server.js  \n</code></pre>\n\n<p>...and visit <code>http://localhost:8080/</code> in your browser. If it worked, your console should contain some output that looks like:</p>\n\n<pre><code>16:13:18.776 \"Got remote\" [object Object]  \n16:13:18.788 \"Got ships\" [object Array]  \n16:13:18.803 \"Got positions for\" \"ABC00090\" [object Array]  \n16:13:18.803 \"Got positions for\" \"XYZ00001\" [object Array]  \n</code></pre>\n\n<h2 id=\"whyisthisuseful\">Why is this useful?  </h2>\n\n<p>Using websockets allows us to reduce the latency of setting up and tearing down http connections by keeping a persistent connection open. It also allows us to circumvent the 6-8 concurrent request limit imposed by default on many browsers.</p>\n\n<p>Using a websockets library like shoe gives us transparent fallback for older browsers without investing any time or resources.</p>\n\n<p>Streaming is a memory efficient way of communicating and transforming data. It allows your application to be more scaleable by decreasing it's memory footprint.</p>\n\n<p>Using browserify allows us to use thousands of modules available on npm, encourages <em>our</em> code to be modular, guards us from polluting the global namespace, reduces the number of requests to the server for individual javascript files and removes the need for us to work out and maintain the order in which js files should be loaded.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1397543844312,"created_by":1,"updated_at":1397543851556,"updated_by":1,"published_at":1397543851559,"published_by":1},{"id":9,"uuid":"3c35fe68-0714-4c35-97ba-526ba2450b6c","title":"Meteor London Devshop - April","slug":"meteor-devshop-ldn-april","markdown":"Meteor London buffets on the winds of chance and optimism. As a monthly, demo-centric, early-adopter support group, we encourage people to have a go; it's a show & tell for fancy hacks to production apps, and everything in between:\n\n>\"Build a Meteor demo, as simple or fancy as you like. Then, _the clever bit_, we meet up and compare notes. The fancy can show off their wares and the curious can learn a trick or two.\" \n\n![Welcome to Meteor London](/content/images/2014/Apr/meteor-london-2014-04-intro.jpg)\n\nSo on the [10th of April](http://www.meetup.com/Meteor-London/events/173719312/), in the salubrius uSwitch auditorium, the floor was once again opened up to the community to talk about all things Meteor, and we were treated to:\n\n**Making iOS developement a tiny bit less horrible with Reactive Cocoa:** A tech talk from our favourite full-stack designer, [Jon Gold](https://twitter.com/jongold), who has been tinking with native apps that sync up with Meteor apps, and showed us how to talk DDP from an iPhone app, and how to re-create the reactive coding style over in native-land via [Reactive Cocoa](https://github.com/ReactiveCocoa/ReactiveCocoa)\n\n![Applause for the Jon Gold](/content/images/2014/Apr/meteor-london-2014-04-gold-applause.jpg)\n\nThat segued nicely into the all important burrito break! Big thanks to [poncho8](http://poncho8.com/) and MDG for most excellent edibles and to tech community wizard [James Chesters](https://twitter.com/jameschesters) for the tip off! \n\nAfter the tortilla frenzy we launched straight into 8 lightning talks:\n\n- **Building Meteor apps for fun and food**: A quick intro to the anatomy of a Meteor app with some simple demos from that [olizilla](https://twitter.com/olizilla): [Lunch leaderboard](https://github.com/olizilla/makelunch), for figuring out whose turn it is to make lunch at the [tableflip](http://tableflip.io/) office, and [monster me](http://monster.meteor.com/), a [code club](https://www.codeclub.org.uk/) project to transmogriphy a young coder into a giggling monster.\n\n- **[Card Flash](http://cardflashapp.com/)** by **Peter Jones**: \n_\"Learn large amounts of small information.\"_ ...never forget a thing again, using Meteor, flash cards and some brain science to upgrade your mind cogs.\n\n![Peter shows us the science behind flash cards](/content/images/2014/Apr/meteor-london-2014-04-flashcards.jpg)\n\n- **[Oplog tailing and you](https://gist.github.com/alanshaw/10046987)** by **[Alan Shaw](https://twitter.com/_alanshaw)**:\nThere's been a lot of talk about the new mongo oplog tailing feature, so Mr Shaw gave a run down of the old poll'n'diff mechanism, the new oplog tailing style and the improvements it brings.\n\n![Alan shows us his oplog entry](/content/images/2014/Apr/Q67E3268.jpg)\n\n- **[Clusterlists](http://clusterlists.com/)** by **Jordan Burgess**\nA really shiny, drag and drop app for taking the clunky world of managing twitter lists and giving it a real-time, Meteor make over. \n[github.com/jordn/clusterlists](https://github.com/jordn/clusterlists)\n\n![Jordan Burgess](/content/images/2014/Apr/cluster-list.jpg)\n\n\n- **[Futurescaper](http://www.futurescaper.com/) & [Podaris](http://podaris.meteor.com/)** by **Nathan Koren**:\nUsing Meteor to help synchornise mind-maps & massive engineering projects, The super smart Mr Koren showed us the \"D3-based force-directed network visualisations\" that power [Futurescaper](http://www.futurescaper.com/), a crowdsourced scenario planning tool.\n\n- **[Sheffield University Hubs hub](http://winwardo.co.uk/mini/eyh/)** by **Topher Winward**, in 3 hours whipped up a real time replacement for the pile of clunky spreadsheets he was handed, including chat rooms and google app authentication for @sheffield.ac.uk users.\n\n- **[tilr.io](https://www.tilr.io/)** by **Nelson Correia**: A fully featured micro blogging platform, already in production, helping school children document and share as they learn.\n\n- **Abletone** by **[Chris Waring](https://twitter.com/cwaring) & the iphone improv ensemble**:\nFor the grand finale Chris assembled a live band of iphone wielding musicians with a clever integration of Meteor and Ableton Live, creating a musical extravaganza from randomly selected players, which, despite minimal declared musical ability, sounded great; somehow even the rick-roll was right on beat.\n\n![The Chris Waring iphone improv ensemble](/content/images/2014/Apr/meteor-london-2014-04-abletone.jpg)\n\nOnwards! More fun and demos are planned for May. If you've got something you'd like show off, get in [contact](http://www.meetup.com/Meteor-London)\n\nPhotos by [Ollie Hammick](http://limnerstudio.co.uk/) & [Chris Waring](https://twitter.com/cwaring)\n\nO!\n","html":"<p>Meteor London buffets on the winds of chance and optimism. As a monthly, demo-centric, early-adopter support group, we encourage people to have a go; it's a show &amp; tell for fancy hacks to production apps, and everything in between:</p>\n\n<blockquote>\n  <p>\"Build a Meteor demo, as simple or fancy as you like. Then, <em>the clever bit</em>, we meet up and compare notes. The fancy can show off their wares and the curious can learn a trick or two.\" </p>\n</blockquote>\n\n<p><img src=\"/content/images/2014/Apr/meteor-london-2014-04-intro.jpg\" alt=\"Welcome to Meteor London\" /></p>\n\n<p>So on the <a href=\"http://www.meetup.com/Meteor-London/events/173719312/\">10th of April</a>, in the salubrius uSwitch auditorium, the floor was once again opened up to the community to talk about all things Meteor, and we were treated to:</p>\n\n<p><strong>Making iOS developement a tiny bit less horrible with Reactive Cocoa:</strong> A tech talk from our favourite full-stack designer, <a href=\"https://twitter.com/jongold\">Jon Gold</a>, who has been tinking with native apps that sync up with Meteor apps, and showed us how to talk DDP from an iPhone app, and how to re-create the reactive coding style over in native-land via <a href=\"https://github.com/ReactiveCocoa/ReactiveCocoa\">Reactive Cocoa</a></p>\n\n<p><img src=\"/content/images/2014/Apr/meteor-london-2014-04-gold-applause.jpg\" alt=\"Applause for the Jon Gold\" /></p>\n\n<p>That segued nicely into the all important burrito break! Big thanks to <a href=\"http://poncho8.com/\">poncho8</a> and MDG for most excellent edibles and to tech community wizard <a href=\"https://twitter.com/jameschesters\">James Chesters</a> for the tip off! </p>\n\n<p>After the tortilla frenzy we launched straight into 8 lightning talks:</p>\n\n<ul>\n<li><p><strong>Building Meteor apps for fun and food</strong>: A quick intro to the anatomy of a Meteor app with some simple demos from that <a href=\"https://twitter.com/olizilla\">olizilla</a>: <a href=\"https://github.com/olizilla/makelunch\">Lunch leaderboard</a>, for figuring out whose turn it is to make lunch at the <a href=\"http://tableflip.io/\">tableflip</a> office, and <a href=\"http://monster.meteor.com/\">monster me</a>, a <a href=\"https://www.codeclub.org.uk/\">code club</a> project to transmogriphy a young coder into a giggling monster.</p></li>\n<li><p><strong><a href=\"http://cardflashapp.com/\">Card Flash</a></strong> by <strong>Peter Jones</strong>: \n<em>\"Learn large amounts of small information.\"</em> ...never forget a thing again, using Meteor, flash cards and some brain science to upgrade your mind cogs.</p></li>\n</ul>\n\n<p><img src=\"/content/images/2014/Apr/meteor-london-2014-04-flashcards.jpg\" alt=\"Peter shows us the science behind flash cards\" /></p>\n\n<ul>\n<li><strong><a href=\"https://gist.github.com/alanshaw/10046987\">Oplog tailing and you</a></strong> by <strong><a href=\"https://twitter.com/_alanshaw\">Alan Shaw</a></strong>:\nThere's been a lot of talk about the new mongo oplog tailing feature, so Mr Shaw gave a run down of the old poll'n'diff mechanism, the new oplog tailing style and the improvements it brings.</li>\n</ul>\n\n<p><img src=\"/content/images/2014/Apr/Q67E3268.jpg\" alt=\"Alan shows us his oplog entry\" /></p>\n\n<ul>\n<li><strong><a href=\"http://clusterlists.com/\">Clusterlists</a></strong> by <strong>Jordan Burgess</strong>\nA really shiny, drag and drop app for taking the clunky world of managing twitter lists and giving it a real-time, Meteor make over. <br />\n<a href=\"https://github.com/jordn/clusterlists\">github.com/jordn/clusterlists</a></li>\n</ul>\n\n<p><img src=\"/content/images/2014/Apr/cluster-list.jpg\" alt=\"Jordan Burgess\" /></p>\n\n<ul>\n<li><p><strong><a href=\"http://www.futurescaper.com/\">Futurescaper</a> &amp; <a href=\"http://podaris.meteor.com/\">Podaris</a></strong> by <strong>Nathan Koren</strong>:\nUsing Meteor to help synchornise mind-maps &amp; massive engineering projects, The super smart Mr Koren showed us the \"D3-based force-directed network visualisations\" that power <a href=\"http://www.futurescaper.com/\">Futurescaper</a>, a crowdsourced scenario planning tool.</p></li>\n<li><p><strong><a href=\"http://winwardo.co.uk/mini/eyh/\">Sheffield University Hubs hub</a></strong> by <strong>Topher Winward</strong>, in 3 hours whipped up a real time replacement for the pile of clunky spreadsheets he was handed, including chat rooms and google app authentication for @sheffield.ac.uk users.</p></li>\n<li><p><strong><a href=\"https://www.tilr.io/\">tilr.io</a></strong> by <strong>Nelson Correia</strong>: A fully featured micro blogging platform, already in production, helping school children document and share as they learn.</p></li>\n<li><p><strong>Abletone</strong> by <strong><a href=\"https://twitter.com/cwaring\">Chris Waring</a> &amp; the iphone improv ensemble</strong>:\nFor the grand finale Chris assembled a live band of iphone wielding musicians with a clever integration of Meteor and Ableton Live, creating a musical extravaganza from randomly selected players, which, despite minimal declared musical ability, sounded great; somehow even the rick-roll was right on beat.</p></li>\n</ul>\n\n<p><img src=\"/content/images/2014/Apr/meteor-london-2014-04-abletone.jpg\" alt=\"The Chris Waring iphone improv ensemble\" /></p>\n\n<p>Onwards! More fun and demos are planned for May. If you've got something you'd like show off, get in <a href=\"http://www.meetup.com/Meteor-London\">contact</a></p>\n\n<p>Photos by <a href=\"http://limnerstudio.co.uk/\">Ollie Hammick</a> &amp; <a href=\"https://twitter.com/cwaring\">Chris Waring</a></p>\n\n<p>O!</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1398115839070,"created_by":1,"updated_at":1398163101503,"updated_by":1,"published_at":1398159104965,"published_by":1},{"id":10,"uuid":"32f6fc7b-cc2e-4d2f-8d63-d95e9aea8890","title":"Meteor London Devshop - May","slug":"meteor-london-devshop-may","markdown":"Meteor London pushes the limits of the possible by demonstrating how to build a selfie sharing service (think Snapchat) in 2 hours. 59 young entrepreneur developers recently packed out the [uSwitch](http://www.uswitch.com/) office to discover how blazingly fast and simple it is to get an app built using Meteor.\n\n![](/content/images/2014/May/highres_365501132.jpg)\n\nWe ([Oli Evans](http://twitter.com/olizilla) and [Alan Shaw](http://twitter.com/_alanshaw)) took to the stage to power pair program the application from scratch, with help, advice and heckles from the audience.\n\nThe app is called \"snapcat\" and was built in four 25 minute sessions.\n\nThe first session was designed primarily to show beginners how to get started building an app with Meteor and how to deploy it to Meteor servers. With that being such a massive piece of cake, we had plenty of time to sneak in some simple code to grab hold of the webcam (using WebRTC getUserMedia instead of Flash), snap a picture and draw it to a HTML5 canvas. Hidden amongst the excitement for canvas and video, it made for a great introduction to Meteor templates, template events and handlebars style syntax.\n\n![](/content/images/2014/May/highres_365501082.jpg)\n\nLike true mavericks of the internet, we decided that the quickest and easiest way to store selfie pics was in the database. The audience were informed under no uncertain terms that this is not the best dumping ground for image data. We were forgiven for our untoward choices and the second session continued as follows:\n\nImage data was gleaned from the canvas using it's toDataURL method and shoved in a Meteor collection for syndication up to the server. A input field for adding an email address was added so that the selfie snaps could be sent to people. We demonstrated how to remove the \"autopublish\" and \"insecure\" packages and explained the consequences of that change by running the app and seeing a once promiscuous and care free app become a locked down and battle hardened turtle. To rectify the situation we explained and added pub/sub calls to access our data and access control rules to allow/deny changes.\n\nThe third session was spent mostly on the refactor tractor. The app required routes so that users could view a list of snaps they had received and view a single snap for a certain amount of time (as per Snapchat). We discussed \"atmosphere\" - the package repository for Meteor packages, and \"meteorite\" - the tool to install said packages, and proceeded to install \"iron-router\" - a package to help do URL routing in Meteor.\n\nThe fourth session involved fleshing out the code for the routes. `/view/[email]` shows a list of new snaps and `/snap/[id]` displays a single snap. The final step for the evening was to add the Meteor \"accounts\" package - a drop in user login, registration and forgot password package allowing the application to restrict access to snaps appropriately.\n\nThe evening was a great success and the audience was patient and understanding given the ad-lib nature of the event. Many [great comments](http://www.meetup.com/Meteor-London/events/181765882/#event-comments-section) were received and much rejoice was expressed.\n\nAll code is available in a [public repo](https://github.com/tableflip/snapcat) for your viewing pleasure and videos from the sessions are available as well:\n\nSession 1: http://youtu.be/SXZDxKIA-m0\nSession 2: http://youtu.be/oHXHBzsVIKw\nSession 3: http://youtu.be/tgJ6xCtcEJc\nSession 4: http://youtu.be/QGA3nMGkxhU\n","html":"<p>Meteor London pushes the limits of the possible by demonstrating how to build a selfie sharing service (think Snapchat) in 2 hours. 59 young entrepreneur developers recently packed out the <a href=\"http://www.uswitch.com/\">uSwitch</a> office to discover how blazingly fast and simple it is to get an app built using Meteor.</p>\n\n<p><img src=\"/content/images/2014/May/highres_365501132.jpg\" alt=\"\" /></p>\n\n<p>We (<a href=\"http://twitter.com/olizilla\">Oli Evans</a> and <a href=\"http://twitter.com/_alanshaw\">Alan Shaw</a>) took to the stage to power pair program the application from scratch, with help, advice and heckles from the audience.</p>\n\n<p>The app is called \"snapcat\" and was built in four 25 minute sessions.</p>\n\n<p>The first session was designed primarily to show beginners how to get started building an app with Meteor and how to deploy it to Meteor servers. With that being such a massive piece of cake, we had plenty of time to sneak in some simple code to grab hold of the webcam (using WebRTC getUserMedia instead of Flash), snap a picture and draw it to a HTML5 canvas. Hidden amongst the excitement for canvas and video, it made for a great introduction to Meteor templates, template events and handlebars style syntax.</p>\n\n<p><img src=\"/content/images/2014/May/highres_365501082.jpg\" alt=\"\" /></p>\n\n<p>Like true mavericks of the internet, we decided that the quickest and easiest way to store selfie pics was in the database. The audience were informed under no uncertain terms that this is not the best dumping ground for image data. We were forgiven for our untoward choices and the second session continued as follows:</p>\n\n<p>Image data was gleaned from the canvas using it's toDataURL method and shoved in a Meteor collection for syndication up to the server. A input field for adding an email address was added so that the selfie snaps could be sent to people. We demonstrated how to remove the \"autopublish\" and \"insecure\" packages and explained the consequences of that change by running the app and seeing a once promiscuous and care free app become a locked down and battle hardened turtle. To rectify the situation we explained and added pub/sub calls to access our data and access control rules to allow/deny changes.</p>\n\n<p>The third session was spent mostly on the refactor tractor. The app required routes so that users could view a list of snaps they had received and view a single snap for a certain amount of time (as per Snapchat). We discussed \"atmosphere\" - the package repository for Meteor packages, and \"meteorite\" - the tool to install said packages, and proceeded to install \"iron-router\" - a package to help do URL routing in Meteor.</p>\n\n<p>The fourth session involved fleshing out the code for the routes. <code>/view/[email]</code> shows a list of new snaps and <code>/snap/[id]</code> displays a single snap. The final step for the evening was to add the Meteor \"accounts\" package - a drop in user login, registration and forgot password package allowing the application to restrict access to snaps appropriately.</p>\n\n<p>The evening was a great success and the audience was patient and understanding given the ad-lib nature of the event. Many <a href=\"http://www.meetup.com/Meteor-London/events/181765882/#event-comments-section\">great comments</a> were received and much rejoice was expressed.</p>\n\n<p>All code is available in a <a href=\"https://github.com/tableflip/snapcat\">public repo</a> for your viewing pleasure and videos from the sessions are available as well:</p>\n\n<p>Session 1: <a href='http://youtu.be/SXZDxKIA-m0'>http://youtu.be/SXZDxKIA-m0</a> <br />\nSession 2: <a href='http://youtu.be/oHXHBzsVIKw'>http://youtu.be/oHXHBzsVIKw</a> <br />\nSession 3: <a href='http://youtu.be/tgJ6xCtcEJc'>http://youtu.be/tgJ6xCtcEJc</a> <br />\nSession 4: <a href='http://youtu.be/QGA3nMGkxhU'>http://youtu.be/QGA3nMGkxhU</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1400663388751,"created_by":1,"updated_at":1401192197452,"updated_by":1,"published_at":1400663388768,"published_by":1},{"id":11,"uuid":"19550d9d-b968-4eff-9fce-ea8164a42bd9","title":"Meteor London - June 2014","slug":"meteor-london-june-2014","markdown":"## Show & Tell\n\nThe demo-fest that is Meteor London rises again! This months roster of wonderment was:\n\n### [lookback.io](https://lookback.io/) - Carl Littke\n\n[lookback.io](https://lookback.io) just landed a chunk of funding and the super Carl Littke, founder and lead developer, swooped in from Sweden to show'n'tell how they've used Meteor and a custom native SDK to capture every tap, swipe and facial expression of your iOS app's user experience.\n\nIt's an amazing product and Carl walked us through the implementation details, from it's infinite-scroll via subscription limiting, to judicious use of undocumented APIs to store a users selection state on a shared Collection without syncing it to the server... followed by an in depth Q&A session. Check out the video!\n\n![Carl Littke](http://photos2.meetupstatic.com/photos/event/4/d/7/8/highres_374659832.jpeg)\n\n![lookback.io](http://photos4.meetupstatic.com/photos/event/4/0/9/e/highres_374896542.jpeg)\n\n### A conceptual future for the multi-device web - [Ben Foxall](https://twitter.com/benjaminbenben)\n\nA javascript adventure into the possibilities of multi-device interfaces.\n\nAnyone whose been to a Meteor London knows we love dangerously demo heavy talks and Ben's is more of a performance on what's possible when we have a handful of connected devices at our disposal.\n\nHighlights included a deceptively simple canvas drawing demo, that morphs into a real-time graph of multi-transport latency, and manipulating images in 3D using swipe gestures from multiple devices.\n\nThe comments afterwards summed it up:\n\n> \"The definition of inspiring\"\n\n> \"Superbe! Mind Blowed!!!!\"\n\n![Ben Foxall](http://photos1.meetupstatic.com/photos/event/4/e/0/4/highres_374659972.jpeg)\n\n![](http://photos1.meetupstatic.com/photos/event/4/e/c/2/highres_374660162.jpeg)\n\n\n### Lightning Talks\n\n**[@MeteoriteP](https://twitter.com/MeteoriteP)** by **Richard Silverton** - https://github.com/richsilv/meteoritetweeter\n\nA meteor package tweet-bot, built on meteor! Despite insisting he's not a developer, Richard showed us how simple it is to connect to a remote Meteor powered DDP endpoint, and build new apps on top of them.\n\n![@MeteoriteP](http://photos3.meetupstatic.com/photos/event/4/0/8/a/highres_374896522.jpeg)\n\n**Orfeo** by **Simon Katan** - https://github.com/kimon-satan/orfeo\n\nA work in progress demo of interactive art project to translate the classic text adventure [ZORK](http://en.wikipedia.org/wiki/Zork) into an interactive audio play.\n\n![Simon Katan](http://photos3.meetupstatic.com/photos/event/4/f/1/2/highres_374660242.jpeg)\n\n**[itinera.re](http://itinera.re/)** by **Tom Sabin** - ­https://github.com/tomsabin/itinerary\n\nA super slick minimalist itinery tool, for planning a grand day out, collating cats and everything in between.\n\n![Tom Sabin](http://photos4.meetupstatic.com/photos/event/4/f/3/0/highres_374660272.jpeg)\n\n![http://itinera.re/](http://photos2.meetupstatic.com/photos/event/4/0/b/2/highres_374896562.jpeg)\n\n**Midi Hack!** by **Jon Gold** - https://github.com/jongd/MIDIHack\n\nAn multi-player audio bop-it game, using Meteor to expose the bleeps of Ableton Live to the assembled-audience orchestra.\n\nAbstact animations prompted the players to affect the audio by making a similar physical gesture with their handset. The changes in the  accelerometer data are mapped to the multitude of Ableton audio parameters, and depsite the UI being all in Swedish and no one having any idea what was going on, the result was a real-time audio jamboree.\n\n![Jon Gold](http://photos2.meetupstatic.com/photos/event/4/f/3/a/highres_374660282.jpeg)\n\n\nPhotos by [Tim Marrinan](http://timothymarrinan.com)\n","html":"<h2 id=\"showtell\">Show &amp; Tell</h2>\n\n<p>The demo-fest that is Meteor London rises again! This months roster of wonderment was:</p>\n\n<h3 id=\"lookbackiohttpslookbackiocarllittke\"><a href=\"https://lookback.io/\">lookback.io</a> - Carl Littke</h3>\n\n<p><a href=\"https://lookback.io\">lookback.io</a> just landed a chunk of funding and the super Carl Littke, founder and lead developer, swooped in from Sweden to show'n'tell how they've used Meteor and a custom native SDK to capture every tap, swipe and facial expression of your iOS app's user experience.</p>\n\n<p>It's an amazing product and Carl walked us through the implementation details, from it's infinite-scroll via subscription limiting, to judicious use of undocumented APIs to store a users selection state on a shared Collection without syncing it to the server... followed by an in depth Q&amp;A session. Check out the video!</p>\n\n<p><img src=\"http://photos2.meetupstatic.com/photos/event/4/d/7/8/highres_374659832.jpeg\" alt=\"Carl Littke\" /></p>\n\n<p><img src=\"http://photos4.meetupstatic.com/photos/event/4/0/9/e/highres_374896542.jpeg\" alt=\"lookback.io\" /></p>\n\n<h3 id=\"aconceptualfutureforthemultidevicewebbenfoxallhttpstwittercombenjaminbenben\">A conceptual future for the multi-device web - <a href=\"https://twitter.com/benjaminbenben\">Ben Foxall</a></h3>\n\n<p>A javascript adventure into the possibilities of multi-device interfaces.</p>\n\n<p>Anyone whose been to a Meteor London knows we love dangerously demo heavy talks and Ben's is more of a performance on what's possible when we have a handful of connected devices at our disposal.</p>\n\n<p>Highlights included a deceptively simple canvas drawing demo, that morphs into a real-time graph of multi-transport latency, and manipulating images in 3D using swipe gestures from multiple devices.</p>\n\n<p>The comments afterwards summed it up:</p>\n\n<blockquote>\n  <p>\"The definition of inspiring\"</p>\n  \n  <p>\"Superbe! Mind Blowed!!!!\"</p>\n</blockquote>\n\n<p><img src=\"http://photos1.meetupstatic.com/photos/event/4/e/0/4/highres_374659972.jpeg\" alt=\"Ben Foxall\" /></p>\n\n<p><img src=\"http://photos1.meetupstatic.com/photos/event/4/e/c/2/highres_374660162.jpeg\" alt=\"\" /></p>\n\n<h3 id=\"lightningtalks\"> Lightning Talks</h3>\n\n<p><strong><a href=\"https://twitter.com/MeteoriteP\">@MeteoriteP</a></strong> by <strong>Richard Silverton</strong> - <a href='https://github.com/richsilv/meteoritetweeter'>https://github.com/richsilv/meteoritetweeter</a></p>\n\n<p>A meteor package tweet-bot, built on meteor! Despite insisting he's not a developer, Richard showed us how simple it is to connect to a remote Meteor powered DDP endpoint, and build new apps on top of them.</p>\n\n<p><img src=\"http://photos3.meetupstatic.com/photos/event/4/0/8/a/highres_374896522.jpeg\" alt=\"@MeteoriteP\" /></p>\n\n<p><strong>Orfeo</strong> by <strong>Simon Katan</strong> - <a href='https://github.com/kimon-satan/orfeo'>https://github.com/kimon-satan/orfeo</a></p>\n\n<p>A work in progress demo of interactive art project to translate the classic text adventure <a href=\"http://en.wikipedia.org/wiki/Zork\">ZORK</a> into an interactive audio play.</p>\n\n<p><img src=\"http://photos3.meetupstatic.com/photos/event/4/f/1/2/highres_374660242.jpeg\" alt=\"Simon Katan\" /></p>\n\n<p><strong><a href=\"http://itinera.re/\">itinera.re</a></strong> by <strong>Tom Sabin</strong> - ­<a href='https://github.com/tomsabin/itinerary'>https://github.com/tomsabin/itinerary</a></p>\n\n<p>A super slick minimalist itinery tool, for planning a grand day out, collating cats and everything in between.</p>\n\n<p><img src=\"http://photos4.meetupstatic.com/photos/event/4/f/3/0/highres_374660272.jpeg\" alt=\"Tom Sabin\" /></p>\n\n<p><img src=\"http://photos2.meetupstatic.com/photos/event/4/0/b/2/highres_374896562.jpeg\" alt=\"http://itinera.re/\" /></p>\n\n<p><strong>Midi Hack!</strong> by <strong>Jon Gold</strong> - <a href='https://github.com/jongd/MIDIHack'>https://github.com/jongd/MIDIHack</a></p>\n\n<p>An multi-player audio bop-it game, using Meteor to expose the bleeps of Ableton Live to the assembled-audience orchestra.</p>\n\n<p>Abstact animations prompted the players to affect the audio by making a similar physical gesture with their handset. The changes in the  accelerometer data are mapped to the multitude of Ableton audio parameters, and depsite the UI being all in Swedish and no one having any idea what was going on, the result was a real-time audio jamboree.</p>\n\n<p><img src=\"http://photos2.meetupstatic.com/photos/event/4/f/3/a/highres_374660282.jpeg\" alt=\"Jon Gold\" /></p>\n\n<p>Photos by <a href=\"http://timothymarrinan.com\">Tim Marrinan</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1402763661801,"created_by":1,"updated_at":1402764132956,"updated_by":1,"published_at":1402763661828,"published_by":1},{"id":12,"uuid":"f504c076-e89e-4c4d-9b5b-99e943ea0de9","title":"LXJS and DRIIFT","slug":"lxjs-and-driift","markdown":"It's often said:\n\n> \"LXJS is made with love\".\n\nIt's true. Love, and a huge amount of work. You can see it in the attention to detail; they look after you, from start to finish.\n\nThey start working with the speakers months before the event, so they're as prepared as can be. That's important when you have to stand up in front of hundreds of your peers, and it means the talks are the best you'll find.\n\nThe workshops are carefully chosen to cover topics that matter right now, and scheduled so that you can choose your own adventure. They're small classes so that you'll get 1-on-1 help and a chance to work with other attendees with similar interests.\n\n...And that's the real point of it. An incredible venue, inspirational talks, hands on workshops, great food and epic hospitality is all background to the real goal. Getting amazing people to meet each other and seeing what comes out. Creating a space for that epic data-transfer rate you get with a bunch of bright minds in the same place.\n\nTo kick-start the conversations, we've upgraded the LXJS lanyards with DRIIFT powers. Touch your phone to someone's lanyard and you'll swap contact details. Simple as that.\n\n![Your event contacts](/content/images/2014/Jun/P1080415.jpg)\n\nAt a low-level it's all about NFC, digital lanyards, badges, connections, and finding people. Beyond that, it's a catalyst for interaction. That curious first bip and conversation that ensues.\n\nAs you complete the workshops you'll get badges to show you've levelled up. They'll appear in the real-time directory showing you who else is about and the topics that interest them.\n\n![Collectable badges](/content/images/2014/Jun/badges.png)\n\nUse it to find collaborators for your codebase or friends to drink with, it's up to you.\n\nWe build our communities by participating, and there's no better place to do that than at LXJS. So pick up your lanyard, collect some badges and get connecting with other attendees and speakers.\n\nSee you there!\n[@driiftio](https://twitter.com/driiftio)<br/>\nhttp://driift.io","html":"<p>It's often said:</p>\n\n<blockquote>\n  <p>\"LXJS is made with love\".</p>\n</blockquote>\n\n<p>It's true. Love, and a huge amount of work. You can see it in the attention to detail; they look after you, from start to finish.</p>\n\n<p>They start working with the speakers months before the event, so they're as prepared as can be. That's important when you have to stand up in front of hundreds of your peers, and it means the talks are the best you'll find.</p>\n\n<p>The workshops are carefully chosen to cover topics that matter right now, and scheduled so that you can choose your own adventure. They're small classes so that you'll get 1-on-1 help and a chance to work with other attendees with similar interests.</p>\n\n<p>...And that's the real point of it. An incredible venue, inspirational talks, hands on workshops, great food and epic hospitality is all background to the real goal. Getting amazing people to meet each other and seeing what comes out. Creating a space for that epic data-transfer rate you get with a bunch of bright minds in the same place.</p>\n\n<p>To kick-start the conversations, we've upgraded the LXJS lanyards with DRIIFT powers. Touch your phone to someone's lanyard and you'll swap contact details. Simple as that.</p>\n\n<p><img src=\"/content/images/2014/Jun/P1080415.jpg\" alt=\"Your event contacts\" /></p>\n\n<p>At a low-level it's all about NFC, digital lanyards, badges, connections, and finding people. Beyond that, it's a catalyst for interaction. That curious first bip and conversation that ensues.</p>\n\n<p>As you complete the workshops you'll get badges to show you've levelled up. They'll appear in the real-time directory showing you who else is about and the topics that interest them.</p>\n\n<p><img src=\"/content/images/2014/Jun/badges.png\" alt=\"Collectable badges\" /></p>\n\n<p>Use it to find collaborators for your codebase or friends to drink with, it's up to you.</p>\n\n<p>We build our communities by participating, and there's no better place to do that than at LXJS. So pick up your lanyard, collect some badges and get connecting with other attendees and speakers.</p>\n\n<p>See you there! <br />\n<a href=\"https://twitter.com/driiftio\">@driiftio</a><br/>\n<a href='http://driift.io'>http://driift.io</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1403605723586,"created_by":1,"updated_at":1403648914356,"updated_by":1,"published_at":1403606470841,"published_by":1},{"id":13,"uuid":"9bef3879-dd0a-4282-bb0d-f360ae530b29","title":"Feedback from NodeSchool at SINFO","slug":"feedback-from-nodeschool-at-sinfo","markdown":"In February TABLEFLIP ran a [NodeSchool](http://nodeschool.io/) event as part of the [SINFO conference](http://www.sinfo.org/). The event went really well and we got great feedback on the day. However, it wasn't until recently that we were given the official feedback that was gathered from a questionnaire attendees were given after the event.\n\nWe thought we'd take the chance to share some of that feedback:\n\n> \"These guys are awesome!\"\n\n> \"Awesome, invite the speakers again next year!\"\n\n> \"The best workshop from this edition of SINFO!\"\n\n> \"Awesome! Loved it, was the first experience.”\n\nIn the pie charts below, the scale is from 1 to 5 where 1 is the worst and 5 is the best:\n\n![Was the workshop content interesting chart](/content/images/2014/Jun/interesting.png)\n\n![Was the workshop well organised chart](/content/images/2014/Jun/wellorganised_1.png)\n\n![Did I learn with this workshop chart](/content/images/2014/Jun/learn_1.png)\n\n![Would I recommend this workshop chart](/content/images/2014/Jun/recommend.png)","html":"<p>In February TABLEFLIP ran a <a href=\"http://nodeschool.io/\">NodeSchool</a> event as part of the <a href=\"http://www.sinfo.org/\">SINFO conference</a>. The event went really well and we got great feedback on the day. However, it wasn't until recently that we were given the official feedback that was gathered from a questionnaire attendees were given after the event.</p>\n\n<p>We thought we'd take the chance to share some of that feedback:</p>\n\n<blockquote>\n  <p>\"These guys are awesome!\"</p>\n  \n  <p>\"Awesome, invite the speakers again next year!\"</p>\n  \n  <p>\"The best workshop from this edition of SINFO!\"</p>\n  \n  <p>\"Awesome! Loved it, was the first experience.”</p>\n</blockquote>\n\n<p>In the pie charts below, the scale is from 1 to 5 where 1 is the worst and 5 is the best:</p>\n\n<p><img src=\"/content/images/2014/Jun/interesting.png\" alt=\"Was the workshop content interesting chart\" /></p>\n\n<p><img src=\"/content/images/2014/Jun/wellorganised_1.png\" alt=\"Was the workshop well organised chart\" /></p>\n\n<p><img src=\"/content/images/2014/Jun/learn_1.png\" alt=\"Did I learn with this workshop chart\" /></p>\n\n<p><img src=\"/content/images/2014/Jun/recommend.png\" alt=\"Would I recommend this workshop chart\" /></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1404134674212,"created_by":1,"updated_at":1404134708932,"updated_by":1,"published_at":1404134678718,"published_by":1},{"id":14,"uuid":"5ae5b0f3-4d1d-4a00-90e0-31c5162571aa","title":"The difference between module.exports and exports","slug":"the-difference-between-module-exports-and-exports","markdown":"There is no magic. Your module code is sandwiched between the two items in this array, and eval'd:\n```js\nNativeModule.wrapper = [\n  '(function (exports, require, module, __filename, __dirname) { ',\n'\\n});'\n];\n```\nhttps://github.com/joyent/node/blob/832ec1cd507ed344badd2ed97d3da92975650a95/src/node.js#L792-L795\n\nThe magic variables you can use in modules - `exports`, `require`, `module`, `__filename`, and `__dirname` are not magic, they are just parameters to the function that is invoked when your module is loaded.\n\nInitially, `exports` and `module.exports` point at the **same _empty_ object**.\n\n![](/content/images/2014/Aug/initial.svg)\n\nYou can add properties to this object using either `module.exports` or `exports` since they both point to the same object, _it doesn't matter_ which you use.\n\nIf you add `exports.foo = \"bar\"` and `module.exports.baz = \"boz\"` then your module's exported object will look like: `{foo: \"bar\", baz: \"boz\"}`\n\n...but, what if you want to export a _function_, or a _string_, or a _unicorn_?\n\nThis is when the difference between `exports` and `module.exports` _is important_.\n\nIf you remember nothing else from this article, remember this:\n\n> **`module.exports` wins**\n\nWhat this means is that whatever object `module.exports` is assigned to is the object that is exported from your module.\n\nIf you want to export a function from your module and you assign it to `exports` and not `module.exports` then this happens:\n\n![](/content/images/2014/Aug/bad-export.svg)\n\nRuh roh! Your module will export an empty object, not the function that you probably intended it to export!\n\nIf you want to export something other than an empty object and you want to use `exports` elsewhere in your module, you'll need to reassign them both:\n\n```js\nexports = module.exports = function () {/* ... */}\nexports.foo = \"bar\"\n```\n\n...and that's it. Simple.","html":"<p>There is no magic. Your module code is sandwiched between the two items in this array, and eval'd:  </p>\n\n<pre><code class=\"js\">NativeModule.wrapper = [  \n  '(function (exports, require, module, __filename, __dirname) { ',\n'\\n});'  \n];\n</code></pre>\n\n<p><a href='https://github.com/joyent/node/blob/832ec1cd507ed344badd2ed97d3da92975650a95/src/node.js#L792-L795'>https://github.com/joyent/node/blob/832ec1cd507ed344badd2ed97d3da92975650a95/src/node.js#L792-L795</a></p>\n\n<p>The magic variables you can use in modules - <code>exports</code>, <code>require</code>, <code>module</code>, <code>__filename</code>, and <code>__dirname</code> are not magic, they are just parameters to the function that is invoked when your module is loaded.</p>\n\n<p>Initially, <code>exports</code> and <code>module.exports</code> point at the <strong>same <em>empty</em> object</strong>.</p>\n\n<p><img src=\"/content/images/2014/Aug/initial.svg\" alt=\"\" /></p>\n\n<p>You can add properties to this object using either <code>module.exports</code> or <code>exports</code> since they both point to the same object, <em>it doesn't matter</em> which you use.</p>\n\n<p>If you add <code>exports.foo = \"bar\"</code> and <code>module.exports.baz = \"boz\"</code> then your module's exported object will look like: <code>{foo: \"bar\", baz: \"boz\"}</code></p>\n\n<p>...but, what if you want to export a <em>function</em>, or a <em>string</em>, or a <em>unicorn</em>?</p>\n\n<p>This is when the difference between <code>exports</code> and <code>module.exports</code> <em>is important</em>.</p>\n\n<p>If you remember nothing else from this article, remember this:</p>\n\n<blockquote>\n  <p><strong><code>module.exports</code> wins</strong></p>\n</blockquote>\n\n<p>What this means is that whatever object <code>module.exports</code> is assigned to is the object that is exported from your module.</p>\n\n<p>If you want to export a function from your module and you assign it to <code>exports</code> and not <code>module.exports</code> then this happens:</p>\n\n<p><img src=\"/content/images/2014/Aug/bad-export.svg\" alt=\"\" /></p>\n\n<p>Ruh roh! Your module will export an empty object, not the function that you probably intended it to export!</p>\n\n<p>If you want to export something other than an empty object and you want to use <code>exports</code> elsewhere in your module, you'll need to reassign them both:</p>\n\n<pre><code class=\"js\">exports = module.exports = function () {/* ... */}  \nexports.foo = \"bar\"  \n</code></pre>\n\n<p>...and that's it. Simple.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1406995234622,"created_by":1,"updated_at":1406997854094,"updated_by":1,"published_at":1406997608773,"published_by":1}],"users":[{"id":1,"uuid":"5ffadb2d-3100-42c2-ba8e-ca8d27138140","name":"Alan Shaw","slug":"alan-shaw","password":"$2a$10$UnfjC2X86fRvIwCRH3lzbOq/0wzYh4ra7mlPO4cw50SUqmtbiIL1G","email":"alan138@gmail.com","image":"//www.gravatar.com/avatar/e36dc772e40dc8203ef90fa98e5b3adf?d=404","cover":null,"bio":null,"website":null,"location":null,"accessibility":null,"status":"active","language":"en_US","meta_title":null,"meta_description":null,"last_login":null,"created_at":1390402434180,"created_by":1,"updated_at":1411411732500,"updated_by":1}],"roles":[{"id":1,"uuid":"832385f2-c61b-419f-839e-b088cd5fea62","name":"Administrator","description":"Administrators","created_at":1390402372905,"created_by":1,"updated_at":1390402372905,"updated_by":1},{"id":2,"uuid":"81d58c88-139d-4bf4-a042-f9aa7755c580","name":"Editor","description":"Editors","created_at":1390402372916,"created_by":1,"updated_at":1390402372916,"updated_by":1},{"id":3,"uuid":"79a2e3e7-7453-49e9-a76b-3719a6e09e45","name":"Author","description":"Authors","created_at":1390402372936,"created_by":1,"updated_at":1390402372936,"updated_by":1}],"roles_users":[{"id":1,"role_id":1,"user_id":1}],"permissions":[{"id":1,"uuid":"18e9631f-79b2-41d3-b3f7-a73b3b63dab4","name":"Edit posts","object_type":"post","action_type":"edit","object_id":null,"created_at":1390402372946,"created_by":1,"updated_at":1390402372946,"updated_by":1},{"id":2,"uuid":"f7e514db-2b88-4d38-a102-d087cab5a579","name":"Remove posts","object_type":"post","action_type":"remove","object_id":null,"created_at":1390402372955,"created_by":1,"updated_at":1390402372955,"updated_by":1},{"id":3,"uuid":"1c417a0e-ccd7-425f-9afc-d92c826929db","name":"Create posts","object_type":"post","action_type":"create","object_id":null,"created_at":1390402372975,"created_by":1,"updated_at":1390402372975,"updated_by":1}],"permissions_users":[],"permissions_roles":[{"id":1,"role_id":1,"permission_id":1},{"id":2,"role_id":1,"permission_id":2},{"id":3,"role_id":1,"permission_id":3}],"sessions":[{"id":"AbTAduzkmTE0Gil0sGHqWblK","expires":1411454932577,"sess":"{\"cookie\":{\"originalMaxAge\":43200000,\"expires\":\"2014-09-23T06:48:52.577Z\",\"httpOnly\":true,\"path\":\"/ghost/\"},\"user\":1,\"_csrfSecret\":\"ghAzXfMDga58rGqp7f6hYMJn\"}"},{"id":"Ma7LcNQfRF7YC7cXrqkEhnhH","expires":1411455028610,"sess":"{\"cookie\":{\"originalMaxAge\":43200000,\"expires\":\"2014-09-23T06:50:28.610Z\",\"httpOnly\":true,\"path\":\"/ghost/\"},\"user\":1,\"_csrfSecret\":\"Dr3bbjXaGqw4AT8RDVcpIZal\"}"}],"settings":[{"id":1,"uuid":"921a7490-82be-4adb-b1c5-96202d9cc78a","key":"databaseVersion","value":"002","type":"core","created_at":1390402373004,"created_by":1,"updated_at":1390402373004,"updated_by":1},{"id":2,"uuid":"7852f0a8-fe3b-415c-960d-9850c1a23c64","key":"dbHash","value":"51a55a4b-a285-4b87-a3bf-8c179de72b5a","type":"core","created_at":1390402373005,"created_by":1,"updated_at":1390402373306,"updated_by":1},{"id":3,"uuid":"a1261f68-0d37-47e7-8256-66281529c2c6","key":"nextUpdateCheck","value":"1411498135","type":"core","created_at":1390402373005,"created_by":1,"updated_at":1411411735060,"updated_by":1},{"id":4,"uuid":"33aca521-cbf8-497d-aa80-2e41b8e2fcd1","key":"displayUpdateNotification","value":"0.5.0","type":"core","created_at":1390402373005,"created_by":1,"updated_at":1411411735061,"updated_by":1},{"id":5,"uuid":"c155d0d8-c213-454d-be76-1b2cef38ce89","key":"title","value":"TABLEFLIP","type":"blog","created_at":1390402373005,"created_by":1,"updated_at":1390402640464,"updated_by":1},{"id":6,"uuid":"bd92b5e5-9b00-488f-a66d-9cd666c32a11","key":"description","value":"Test the ideas.","type":"blog","created_at":1390402373006,"created_by":1,"updated_at":1390402640465,"updated_by":1},{"id":7,"uuid":"1ec4958f-856e-4c0b-9417-0a5ea0dc2576","key":"email","value":"alan138@gmail.com","type":"blog","created_at":1390402373006,"created_by":1,"updated_at":1390402640465,"updated_by":1},{"id":8,"uuid":"85733ad0-22a5-436f-bd06-9067310969d1","key":"logo","value":"/content/images/2014/Jan/logo_tabpleflip.png","type":"blog","created_at":1390402373007,"created_by":1,"updated_at":1390402640466,"updated_by":1},{"id":9,"uuid":"71bab723-e787-4f4a-9e00-b43c899acbd9","key":"cover","value":"","type":"blog","created_at":1390402373009,"created_by":1,"updated_at":1390402640467,"updated_by":1},{"id":10,"uuid":"ca2c0524-3c63-413e-b9d8-d2ae2901f78f","key":"defaultLang","value":"en_US","type":"blog","created_at":1390402373010,"created_by":1,"updated_at":1390402640467,"updated_by":1},{"id":11,"uuid":"c1045db4-c880-440a-8bdf-447af0345109","key":"postsPerPage","value":"6","type":"blog","created_at":1390402373010,"created_by":1,"updated_at":1390402640468,"updated_by":1},{"id":12,"uuid":"eda87297-179e-412c-8adb-86edffecb76a","key":"forceI18n","value":"true","type":"blog","created_at":1390402373010,"created_by":1,"updated_at":1390402640469,"updated_by":1},{"id":13,"uuid":"656a18b2-c49e-409e-a0d7-7554d8f8fee7","key":"permalinks","value":"/:slug/","type":"blog","created_at":1390402373011,"created_by":1,"updated_at":1390402640469,"updated_by":1},{"id":14,"uuid":"822d8699-f48b-4836-b078-0e8f3f277340","key":"activeTheme","value":"tableflip","type":"theme","created_at":1390402373011,"created_by":1,"updated_at":1390402640470,"updated_by":1},{"id":15,"uuid":"23f080f8-11b5-4182-8016-b0c765694159","key":"activePlugins","value":"[]","type":"plugin","created_at":1390402373011,"created_by":1,"updated_at":1390402373011,"updated_by":1},{"id":16,"uuid":"9947931c-1c53-4b10-bc95-5e15af38cc79","key":"installedPlugins","value":"[]","type":"plugin","created_at":1390402373011,"created_by":1,"updated_at":1393846389245,"updated_by":1},{"id":17,"uuid":"cbcf8d9e-960f-4c9a-a1be-eb99df8e47ec","key":"activeApps","value":"[]","type":"app","created_at":1398158887097,"created_by":1,"updated_at":1398158887097,"updated_by":1},{"id":18,"uuid":"ce380323-47b6-40d1-8b73-edf9a1244724","key":"installedApps","value":"[]","type":"app","created_at":1398158887098,"created_by":1,"updated_at":1408376444058,"updated_by":1}],"tags":[{"id":1,"uuid":"6f5f946e-227f-41aa-993b-fb96a27931f9","name":"Getting Started","slug":"getting-started","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1390402372892,"created_by":1,"updated_at":1390402372892,"updated_by":1}],"posts_tags":[]}}